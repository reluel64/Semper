/*
 * Event queueing routines
 * Part of Project 'Semper'
 * Written by Alexandru-Daniel Mărgărit
 */

#include <semper.h>
#include <mem.h>
#include <event.h>
#include <pthread.h>
#include <time.h>
#if defined(__linux__)
#include <sys/epoll.h>
#include <sys/eventfd.h>
#include <sys/inotify.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>
#include <signal.h>
#include <poll.h>
#include <limits.h>
#endif


void event_wait(event_queue* eq)
{
    if(eq)
    {
        eq->slept = 0;

        if(eq->wfcn)
        {
            eq->slept =  eq->wfcn(eq->pvwfcn, eq->to_sleep);
        }
    }
}

void event_wake(event_queue *eq)
{
    if(eq)
    {
        pthread_mutex_lock(&eq->mutex);

        if(eq->wkfcn)
        {
            eq->wkfcn(eq->pvwfcn);
        }

        pthread_mutex_unlock(&eq->mutex);
    }
}

event_queue* event_queue_init(event_wait_func wfcn, event_wake_func wkfcn, void *pvwfcn)
{
    event_queue* eq = zmalloc(sizeof(event_queue));

    if(eq)
    {
        pthread_mutexattr_t mutex_attr;
        pthread_mutexattr_init(&mutex_attr);
        pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);
        pthread_mutex_init(&eq->mutex, &mutex_attr);
        pthread_mutexattr_destroy(&mutex_attr);
        list_entry_init(&eq->events);
        eq->wfcn = wfcn;
        eq->pvwfcn = pvwfcn;
        eq->wkfcn = wkfcn;
    }

    return (eq);
}

void event_remove(event_queue* eq, event_handler eh, void* pv, unsigned char flags)
{
    if(eq)
    {
        pthread_mutex_lock(&eq->mutex);
        event* e = NULL;

        list_enum_part(e, &eq->events, current)
        {
            unsigned char match = 0;

            switch(flags & EVENT_REMOVE_BY_DATA_HANDLER)
            {
                case EVENT_REMOVE_BY_DATA_HANDLER:
                    if(e->handler == eh && e->pv == pv)
                        match = 1;

                    break;

                case EVENT_REMOVE_BY_DATA:
                    if(e->pv == pv)
                        match = 1;

                    break;

                case EVENT_REMOVE_BY_HANDLER:
                    if(e->handler == eh)
                        match = 1;

                    break;
            }

            if(match)
            {
                e->handler = NULL;
            }
        }

        pthread_mutex_unlock(&eq->mutex);
    }
}

int event_push(event_queue* eq, event_handler handler, void* pv, size_t timeout, unsigned char flags)
{
    if(eq == NULL)
    {
        return(-1);
    }

    if(flags & EVENT_REMOVE_BY_DATA_HANDLER)
    {
        event_remove(eq, handler, pv, flags);
    }

    event* e = zmalloc(sizeof(event));

    if(e == NULL)
    {
        return(-1);
    }

    list_entry_init(&e->current);
    e->handler = handler;
    e->pv = pv;

    pthread_mutex_lock(&eq->mutex);

    if(flags & EVENT_PUSH_TAIL)
    {
        linked_list_add_last(&e->current, &eq->events);
    }
    else
    {
        linked_list_add(&e->current, &eq->events);
    }

    if(flags & EVENT_PUSH_TIMER)
    {
        e->time = (timeout >= 16 ? timeout : 16);
        flags &= ~EVENT_TIMER_INIT;
    }

    e->flags = flags;

    if(!(flags & EVENT_NO_WAKE))
    {
        if(eq->wkfcn)
        {
            eq->wkfcn(eq->pvwfcn);
        }
    }

    pthread_mutex_unlock(&eq->mutex);

    return (0);
}

static void event_remove_internal(event* e)
{
    if(e)
    {
        if(e->current.next && e->current.prev)
        {
            linked_list_remove(&e->current);
        }

        sfree((void**)&e);
    }
}

void event_queue_clear(event_queue* eq)
{
    event* e = NULL;
    event* te = NULL;

    if(eq)
    {
        pthread_mutex_lock(&eq->mutex);
        list_enum_part_safe(e, te, &eq->events, current)
        {
            event_remove_internal(e);
        }
        pthread_mutex_unlock(&eq->mutex);
    }
}

void event_queue_destroy(event_queue** eq)
{
    if(*eq)
    {
        pthread_mutex_lock(&(*eq)->mutex);
        event_queue_clear(*eq);
        pthread_mutex_unlock(&(*eq)->mutex);
        pthread_mutex_destroy(&(*eq)->mutex);
        sfree((void**)eq);
    }
}


int event_queue_empty(event_queue *eq)
{
    int empty = 0;

    if(eq == NULL)
        return(1);

    pthread_mutex_lock(&eq->mutex);
    empty = linked_list_empty(&eq->events);
    pthread_mutex_unlock(&eq->mutex);
    return(empty);
}

void event_process(event_queue* eq)
{
    size_t drift = 0;
    event* e = NULL;
    event* te = NULL;
    if(eq)
    {
        eq->to_sleep = -1;
        list_enum_part_backward_safe(e, te, &eq->events, current)
        {
            pthread_mutex_lock(&eq->mutex);
            eq->ce = e;
            pthread_mutex_unlock(&eq->mutex);

            if(!(e->flags & EVENT_TIMER_INIT) && (e->flags & EVENT_PUSH_TIMER))
            {
                e->flags |= EVENT_TIMER_INIT;
                eq->to_sleep = min(e->time, eq->to_sleep);
                continue;
            }

            if(e->flags & EVENT_PUSH_TIMER)
            {
                e->pos += eq->slept + drift;

                if(e->time >= e->pos)
                {
                    eq->to_sleep = min(e->time - e->pos, eq->to_sleep);
                }
                else
                {
                    eq->to_sleep = 0;
                }
            }

            if((e->time <= e->pos) || !(e->flags & EVENT_PUSH_TIMER))
            {
                if(e->handler)
                {
                    struct timespec t1 = {0};
                    struct timespec t2 = {0};
                    size_t call_duration = 0;

                    clock_gettime(CLOCK_MONOTONIC, &t1);
                    e->handler(e->pv);
                    clock_gettime(CLOCK_MONOTONIC, &t2);

                    call_duration = (t2.tv_nsec - t1.tv_nsec) / 1000000 + (t2.tv_sec - t1.tv_sec) * 1000;
                    drift += call_duration;
                }

                pthread_mutex_lock(&eq->mutex);
                eq->ce = NULL;
                event_remove_internal(e);
                pthread_mutex_unlock(&eq->mutex);
            }
        }
        pthread_mutex_lock(&eq->mutex);
        eq->ce = NULL;
        pthread_mutex_unlock(&eq->mutex);
    }

    if(eq->to_sleep >= drift && drift > 0)
    {
        eq->to_sleep-=drift;
    }

    eq->slept=0;
}
